{"doc":null,"source":"async def server():\n    # create a server\n    await uvicorn.Server(config=uvicorn.Config(app)).serve()\n"}
{}
{"doc":null,"source":"    async def run_session(self):\n        await self.io.ai_reply(\"Hi, I am your AI legal navigator, how can I help you?\")\n\n        # classify user case\n        user_next_action = await self.io.user_input()\n        result = await self.classify_problem_space_loop(\n            [\"Eviction\", \"Divorce\", \"Debt\"], user_next_action\n        )\n        if result != \"Eviction\":\n            await self.io.ai_reply(\n                \"Sorry, I can currently only help you with eviction cases. Please talk to a lawyer.\",\n            )\n            return\n\n        # get image of the letter received\n        await self.io.ai_reply(\n            \"Sorry to hear that! Can you show me the letter you received?\",\n            takePhoto=True,\n        )\n        file = await self.io.user_input()\n        file_contents = await ocr_file(file)\n        await classify_document(file_contents)\n\n        # provide user with instructions\n        await self.io.ai_reply(\n            \"You have 5 days to file an answer form. Do you want to do it yourself or get legal help?\",\n        )\n        user_next_action = await self.io.user_input()\n        choice = await classify_next_steps(user_next_action)\n        if choice == \"to do it themselves\":\n            await self.io.ai_reply(\n                \"Here is the form. I filled out some fields for you. Complete the rest and take it to the your county court. For more info, see the California Courts Self Help Guide.\",\n                showDIY=True,\n                isEnd=True,\n            )\n        elif choice == \"get legal help\":\n            await self.io.ai_reply(\n                \"Based on your jurstiction, I recommend you visit evictiondefence.org to get legal assistance.\",\n                showLegalHelp=True,\n                isEnd=True,\n            )\n        else:\n            await self.io.ai_reply(\"Have a good day!\", isEnd=True)\n"}
{"self":"<ChatSession.ChatSession object at 0x2873a2380>"}
{"doc":null,"source":"    async def ai_reply(\n        self, text, takePhoto=False, showDIY=False, showLegalHelp=False, isEnd=False\n    ):\n        self.ai_input_waiter.set_result(\n            {\n                \"text\": text,\n                \"takePhoto\": takePhoto,\n                \"showDIY\": showDIY,\n                \"showLegalHelp\": showLegalHelp,\n                \"isEnd\": isEnd,\n            }\n        )\n"}
{"self":"<ChatIO.ChatIO object at 0x2873a2650>","text":"Hi, I am your AI legal navigator, how can I help you?","takePhoto":false,"showDIY":false,"showLegalHelp":false,"isEnd":false}
null
{"doc":null,"source":"    async def user_input(self):\n        if self.user_input_waiter is None or self.user_input_waiter.done():\n            self.user_input_waiter = get_running_loop().create_future()\n        return await self.user_input_waiter\n"}
{"self":"<ChatIO.ChatIO object at 0x2873a2650>"}
"I got an eviction letter."
{"doc":null,"source":"    async def classify_problem_space_loop(self, options, chat):\n        extended_options = options + [\"Needs more info\", \"Other\"]\n        classification = None\n        while classification is None or classification == \"Needs more info\":\n            classification = await classify_problem_space(extended_options, chat)\n\n            if classification is None or classification == \"Needs more info\":\n                follow_up_question = await ask_follow_up_for_classification(\n                    extended_options, chat\n                )\n                await self.io.ai_reply(follow_up_question)\n                follow_up_reply = await self.io.user_input()\n                chat += F(\n                    f\"\"\"\\nFollow up question: \"{follow_up_question}\"\\nFollow up reply: \"{follow_up_reply}\\\"\"\"\"\n                ).strip()\n\n        return classification\n"}
{"self":"<ChatSession.ChatSession object at 0x2873a2380>","options":["Eviction","Divorce","Debt"],"chat":"I got an eviction letter."}
{"doc":null,"source":"async def classify_problem_space(options, chat):\n    prompt = classify_problem_space_prompt(options, chat)\n    result = await llm(prompt)\n    match = re.search(\"[0-9]\", result)\n    if match is not None:\n        option = match.group()\n    return options[int(option) - 1]\n"}
{"options":["Eviction","Divorce","Debt","Needs more info","Other"],"chat":"I got an eviction letter."}
{"doc":"Generate an answer to a question given some context.","source":"    async def complete(\n        self,\n        *,\n        prompt: str,\n        stop: Stop = None,\n        verbose: bool = False,\n        default: str = \"\",\n        max_tokens: int = 256,\n    ) -> str:\n        \"\"\"Generate an answer to a question given some context.\"\"\"\n        if verbose:\n            self._print_markdown(prompt)\n        response = await self._complete(prompt, stop=stop, max_tokens=max_tokens)\n        completion = self._extract_completion(response)\n        if verbose:\n            self._print_markdown(completion)\n        return completion\n"}
{"self":{"class_name":"OpenAIAgent","model":"text-davinci-002","temperature":0.0,"top_p":1.0},"prompt":{"__fstring__":["Classify the user problem. \n        \nPossible classifications:\n\n",{"source":"options_str","value":{"__fstring__":[{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[0]","value":{"__fstring__":[{"source":"i+1","value":1,"formatted":"1"},". ",{"source":"option","value":"Eviction","formatted":"Eviction"}]},"formatted":"1. Eviction"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[1]","value":{"__fstring__":[{"source":"i+1","value":2,"formatted":"2"},". ",{"source":"option","value":"Divorce","formatted":"Divorce"}]},"formatted":"2. Divorce"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[2]","value":{"__fstring__":[{"source":"i+1","value":3,"formatted":"3"},". ",{"source":"option","value":"Debt","formatted":"Debt"}]},"formatted":"3. Debt"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[3]","value":{"__fstring__":[{"source":"i+1","value":4,"formatted":"4"},". ",{"source":"option","value":"Needs more info","formatted":"Needs more info"}]},"formatted":"4. Needs more info"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[4]","value":{"__fstring__":[{"source":"i+1","value":5,"formatted":"5"},". ",{"source":"option","value":"Other","formatted":"Other"}]},"formatted":"5. Other"}]},"formatted":"1. Eviction\n2. Divorce\n3. Debt\n4. Needs more info\n5. Other"},"\n\nProblem: \"",{"source":"chat","value":"I got an eviction letter.","formatted":"I got an eviction letter."},"\"\nAnswer: \"The user problem is #"]},"stop":null,"verbose":false,"default":"","max_tokens":256}
{"doc":"Send a completion request to the OpenAI API with the given prompt and parameters.","source":"    async def _complete(self, prompt, **kwargs) -> dict:\n        \"\"\"Send a completion request to the OpenAI API with the given prompt and parameters.\"\"\"\n        kwargs.update(\n            {\n                \"model\": self.model,\n                \"temperature\": self.temperature,\n                \"top_p\": self.top_p,\n                \"n\": 1,\n            }\n        )\n        response = await openai_complete(prompt, **kwargs)\n        if \"choices\" not in response:\n            raise ValueError(f\"No choices in response: {response}\")\n        return response\n"}
{"self":{"class_name":"OpenAIAgent","model":"text-davinci-002","temperature":0.0,"top_p":1.0},"prompt":{"__fstring__":["Classify the user problem. \n        \nPossible classifications:\n\n",{"source":"options_str","value":{"__fstring__":[{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[0]","value":{"__fstring__":[{"source":"i+1","value":1,"formatted":"1"},". ",{"source":"option","value":"Eviction","formatted":"Eviction"}]},"formatted":"1. Eviction"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[1]","value":{"__fstring__":[{"source":"i+1","value":2,"formatted":"2"},". ",{"source":"option","value":"Divorce","formatted":"Divorce"}]},"formatted":"2. Divorce"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[2]","value":{"__fstring__":[{"source":"i+1","value":3,"formatted":"3"},". ",{"source":"option","value":"Debt","formatted":"Debt"}]},"formatted":"3. Debt"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[3]","value":{"__fstring__":[{"source":"i+1","value":4,"formatted":"4"},". ",{"source":"option","value":"Needs more info","formatted":"Needs more info"}]},"formatted":"4. Needs more info"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[4]","value":{"__fstring__":[{"source":"i+1","value":5,"formatted":"5"},". ",{"source":"option","value":"Other","formatted":"Other"}]},"formatted":"5. Other"}]},"formatted":"1. Eviction\n2. Divorce\n3. Debt\n4. Needs more info\n5. Other"},"\n\nProblem: \"",{"source":"chat","value":"I got an eviction letter.","formatted":"I got an eviction letter."},"\"\nAnswer: \"The user problem is #"]},"stop":null,"max_tokens":256}
{"doc":"Send a completion request to the OpenAI API and return the JSON response.","source":"@trace\nasync def openai_complete(\n    prompt: str,\n    stop: Optional[str] = \"\\n\",\n    top_p: float = 1,\n    temperature: float = 0,\n    model: str = \"text-davinci-002\",\n    max_tokens: int = 256,\n    logprobs: Optional[int] = None,\n    logit_bias: Optional[Mapping[str, Union[int, float]]] = None,\n    n: int = 1,\n    echo: bool = False,\n    cache_id: int = 0,  # for repeated non-deterministic sampling using caching\n) -> dict:\n    \"\"\"Send a completion request to the OpenAI API and return the JSON response.\"\"\"\n    params = {\n        \"prompt\": prompt,\n        \"stop\": stop,\n        \"top_p\": top_p,\n        \"temperature\": temperature,\n        \"model\": model,\n        \"echo\": echo,\n        \"max_tokens\": max_tokens,\n        \"logprobs\": logprobs,\n        \"n\": n,\n    }\n    if logit_bias:\n        params[\"logit_bias\"] = logit_bias  # type: ignore[assignment]\n    response = await _post(\"completions\", json=params, cache_id=cache_id)\n    if isinstance(response, TooLongRequestError):\n        raise response\n    add_fields(davinci_equivalent_tokens=get_davinci_equivalent_tokens(response))\n    return response\n"}
{"prompt":{"__fstring__":["Classify the user problem. \n        \nPossible classifications:\n\n",{"source":"options_str","value":{"__fstring__":[{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[0]","value":{"__fstring__":[{"source":"i+1","value":1,"formatted":"1"},". ",{"source":"option","value":"Eviction","formatted":"Eviction"}]},"formatted":"1. Eviction"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[1]","value":{"__fstring__":[{"source":"i+1","value":2,"formatted":"2"},". ",{"source":"option","value":"Divorce","formatted":"Divorce"}]},"formatted":"2. Divorce"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[2]","value":{"__fstring__":[{"source":"i+1","value":3,"formatted":"3"},". ",{"source":"option","value":"Debt","formatted":"Debt"}]},"formatted":"3. Debt"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[3]","value":{"__fstring__":[{"source":"i+1","value":4,"formatted":"4"},". ",{"source":"option","value":"Needs more info","formatted":"Needs more info"}]},"formatted":"4. Needs more info"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[4]","value":{"__fstring__":[{"source":"i+1","value":5,"formatted":"5"},". ",{"source":"option","value":"Other","formatted":"Other"}]},"formatted":"5. Other"}]},"formatted":"1. Eviction\n2. Divorce\n3. Debt\n4. Needs more info\n5. Other"},"\n\nProblem: \"",{"source":"chat","value":"I got an eviction letter.","formatted":"I got an eviction letter."},"\"\nAnswer: \"The user problem is #"]},"stop":null,"top_p":1.0,"temperature":0.0,"model":"text-davinci-002","max_tokens":256,"logprobs":null,"logit_bias":null,"n":1,"echo":false,"cache_id":0}
{"id":"cmpl-7IRWmnxY91eq8MJsFX4A4KzeGUcXV","object":"text_completion","created":1684630076,"model":"text-davinci-002","choices":[{"text":"1 Eviction.\"","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":60,"completion_tokens":4,"total_tokens":64}}
"1 Eviction.\""
"Eviction"
{"self":"<ChatIO.ChatIO object at 0x2873a2650>","text":"Sorry to hear that! Can you show me the letter you received?","takePhoto":true,"showDIY":false,"showLegalHelp":false,"isEnd":false}
"<File>"
{"doc":null,"source":"async def ocr_file(file):\n    # dummy function for now\n    await sleep(6)\n    return \"\"\"UD-100\nATTORNEY OR PARTY WITHOUT ATTORNEY STATE HAR NUMBER: FOR COURT USE ONLY\nNAME: Landy\nFIRM NAME Jon\nSTREET ACCESS: 123 home\nCITY Palo Alo STATE.CA 2P CODE: B4920\nTELEPHONE NO: FAX NO:\nEMAIL ADDRESS:\n(ATTORNEY FOR Iraneti\nSUPERIOR COURT OF CALIFORNIA, COUNTY OF SI Om\nSTREET ADORESS 270 Grant Avenue\nMALING ADORESS 270 Grant Avenue, Palo Alto, CA. 94306\nCITY AND ZIP CODE Palo Alo, 94306\nBRANCH NANE Palo Alto courthouse\"\"\"\n"}
{"file":"<File>"}
"UD-100\nATTORNEY OR PARTY WITHOUT ATTORNEY STATE HAR NUMBER: FOR COURT USE ONLY\nNAME: Landy\nFIRM NAME Jon\nSTREET ACCESS: 123 home\nCITY Palo Alo STATE.CA 2P CODE: B4920\nTELEPHONE NO: FAX NO:\nEMAIL ADDRESS:\n(ATTORNEY FOR Iraneti\nSUPERIOR COURT OF CALIFORNIA, COUNTY OF SI Om\nSTREET ADORESS 270 Grant Avenue\nMALING ADORESS 270 Grant Avenue, Palo Alto, CA. 94306\nCITY AND ZIP CODE Palo Alo, 94306\nBRANCH NANE Palo Alto courthouse"
{"doc":null,"source":"async def classify_document(file_contents):\n    result = await llm(\n        F(\n            f\"\"\"Extract the form type starting with UD- from the file contents\n\n``` \n{file_contents}\n````\n\nAnswer: \"The form type is UD-\"\"\"\n        ).strip()\n    )\n    # return \"UD-\" + result[0:3]\n    return \"UD-100\"\n"}
{"file_contents":"UD-100\nATTORNEY OR PARTY WITHOUT ATTORNEY STATE HAR NUMBER: FOR COURT USE ONLY\nNAME: Landy\nFIRM NAME Jon\nSTREET ACCESS: 123 home\nCITY Palo Alo STATE.CA 2P CODE: B4920\nTELEPHONE NO: FAX NO:\nEMAIL ADDRESS:\n(ATTORNEY FOR Iraneti\nSUPERIOR COURT OF CALIFORNIA, COUNTY OF SI Om\nSTREET ADORESS 270 Grant Avenue\nMALING ADORESS 270 Grant Avenue, Palo Alto, CA. 94306\nCITY AND ZIP CODE Palo Alo, 94306\nBRANCH NANE Palo Alto courthouse"}
{"self":{"class_name":"OpenAIAgent","model":"text-davinci-002","temperature":0.0,"top_p":1.0},"prompt":{"__fstring__":["Extract the form type starting with UD- from the file contents\n\n``` \n",{"source":"file_contents","value":"UD-100\nATTORNEY OR PARTY WITHOUT ATTORNEY STATE HAR NUMBER: FOR COURT USE ONLY\nNAME: Landy\nFIRM NAME Jon\nSTREET ACCESS: 123 home\nCITY Palo Alo STATE.CA 2P CODE: B4920\nTELEPHONE NO: FAX NO:\nEMAIL ADDRESS:\n(ATTORNEY FOR Iraneti\nSUPERIOR COURT OF CALIFORNIA, COUNTY OF SI Om\nSTREET ADORESS 270 Grant Avenue\nMALING ADORESS 270 Grant Avenue, Palo Alto, CA. 94306\nCITY AND ZIP CODE Palo Alo, 94306\nBRANCH NANE Palo Alto courthouse","formatted":"UD-100\nATTORNEY OR PARTY WITHOUT ATTORNEY STATE HAR NUMBER: FOR COURT USE ONLY\nNAME: Landy\nFIRM NAME Jon\nSTREET ACCESS: 123 home\nCITY Palo Alo STATE.CA 2P CODE: B4920\nTELEPHONE NO: FAX NO:\nEMAIL ADDRESS:\n(ATTORNEY FOR Iraneti\nSUPERIOR COURT OF CALIFORNIA, COUNTY OF SI Om\nSTREET ADORESS 270 Grant Avenue\nMALING ADORESS 270 Grant Avenue, Palo Alto, CA. 94306\nCITY AND ZIP CODE Palo Alo, 94306\nBRANCH NANE Palo Alto courthouse"},"\n````\n\nAnswer: \"The form type is UD-"]},"stop":null,"verbose":false,"default":"","max_tokens":256}
{"self":{"class_name":"OpenAIAgent","model":"text-davinci-002","temperature":0.0,"top_p":1.0},"prompt":{"__fstring__":["Extract the form type starting with UD- from the file contents\n\n``` \n",{"source":"file_contents","value":"UD-100\nATTORNEY OR PARTY WITHOUT ATTORNEY STATE HAR NUMBER: FOR COURT USE ONLY\nNAME: Landy\nFIRM NAME Jon\nSTREET ACCESS: 123 home\nCITY Palo Alo STATE.CA 2P CODE: B4920\nTELEPHONE NO: FAX NO:\nEMAIL ADDRESS:\n(ATTORNEY FOR Iraneti\nSUPERIOR COURT OF CALIFORNIA, COUNTY OF SI Om\nSTREET ADORESS 270 Grant Avenue\nMALING ADORESS 270 Grant Avenue, Palo Alto, CA. 94306\nCITY AND ZIP CODE Palo Alo, 94306\nBRANCH NANE Palo Alto courthouse","formatted":"UD-100\nATTORNEY OR PARTY WITHOUT ATTORNEY STATE HAR NUMBER: FOR COURT USE ONLY\nNAME: Landy\nFIRM NAME Jon\nSTREET ACCESS: 123 home\nCITY Palo Alo STATE.CA 2P CODE: B4920\nTELEPHONE NO: FAX NO:\nEMAIL ADDRESS:\n(ATTORNEY FOR Iraneti\nSUPERIOR COURT OF CALIFORNIA, COUNTY OF SI Om\nSTREET ADORESS 270 Grant Avenue\nMALING ADORESS 270 Grant Avenue, Palo Alto, CA. 94306\nCITY AND ZIP CODE Palo Alo, 94306\nBRANCH NANE Palo Alto courthouse"},"\n````\n\nAnswer: \"The form type is UD-"]},"stop":null,"max_tokens":256}
{"prompt":{"__fstring__":["Extract the form type starting with UD- from the file contents\n\n``` \n",{"source":"file_contents","value":"UD-100\nATTORNEY OR PARTY WITHOUT ATTORNEY STATE HAR NUMBER: FOR COURT USE ONLY\nNAME: Landy\nFIRM NAME Jon\nSTREET ACCESS: 123 home\nCITY Palo Alo STATE.CA 2P CODE: B4920\nTELEPHONE NO: FAX NO:\nEMAIL ADDRESS:\n(ATTORNEY FOR Iraneti\nSUPERIOR COURT OF CALIFORNIA, COUNTY OF SI Om\nSTREET ADORESS 270 Grant Avenue\nMALING ADORESS 270 Grant Avenue, Palo Alto, CA. 94306\nCITY AND ZIP CODE Palo Alo, 94306\nBRANCH NANE Palo Alto courthouse","formatted":"UD-100\nATTORNEY OR PARTY WITHOUT ATTORNEY STATE HAR NUMBER: FOR COURT USE ONLY\nNAME: Landy\nFIRM NAME Jon\nSTREET ACCESS: 123 home\nCITY Palo Alo STATE.CA 2P CODE: B4920\nTELEPHONE NO: FAX NO:\nEMAIL ADDRESS:\n(ATTORNEY FOR Iraneti\nSUPERIOR COURT OF CALIFORNIA, COUNTY OF SI Om\nSTREET ADORESS 270 Grant Avenue\nMALING ADORESS 270 Grant Avenue, Palo Alto, CA. 94306\nCITY AND ZIP CODE Palo Alo, 94306\nBRANCH NANE Palo Alto courthouse"},"\n````\n\nAnswer: \"The form type is UD-"]},"stop":null,"top_p":1.0,"temperature":0.0,"model":"text-davinci-002","max_tokens":256,"logprobs":null,"logit_bias":null,"n":1,"echo":false,"cache_id":0}
{"id":"cmpl-7IQ6KES01oLxpoc0SYmbfZzMXrlRw","object":"text_completion","created":1684624592,"model":"text-davinci-002","choices":[{"text":"100.\"","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":180,"completion_tokens":2,"total_tokens":182}}
"100.\""
"UD-100"
{"self":"<ChatIO.ChatIO object at 0x2873a2650>","text":"You have 5 days to file an answer form. Do you want to do it yourself or get legal help?","takePhoto":false,"showDIY":false,"showLegalHelp":false,"isEnd":false}
"Myself."
{"doc":null,"source":"async def classify_next_steps(user_next_action):\n    options = [\"to do it themselves\", \"get legal help\", \"unknown\"]\n    options_str = F(\"\\n\").join(\n        [F(f\"{i+1}. {option}\") for i, option in enumerate(options)]\n    )\n    result = await llm(\n        F(\n            f\"\"\"\nWhat does the user wish to do?\n\nOptions:\n{options_str}\n\nUser statement: \"{user_next_action}\"\n\nAnswer: \"The user wants to take option #\"\"\"\n        ).strip()\n    )\n\n    match = re.search(\"[0-9]\", result)\n    if match is not None:\n        option = match.group()\n    return options[int(option) - 1]\n"}
{"user_next_action":"Myself."}
{"self":{"class_name":"OpenAIAgent","model":"text-davinci-002","temperature":0.0,"top_p":1.0},"prompt":{"__fstring__":["What does the user wish to do?\n\nOptions:\n",{"source":"options_str","value":{"__fstring__":[{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[0]","value":{"__fstring__":[{"source":"i+1","value":1,"formatted":"1"},". ",{"source":"option","value":"to do it themselves","formatted":"to do it themselves"}]},"formatted":"1. to do it themselves"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[1]","value":{"__fstring__":[{"source":"i+1","value":2,"formatted":"2"},". ",{"source":"option","value":"get legal help","formatted":"get legal help"}]},"formatted":"2. get legal help"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[2]","value":{"__fstring__":[{"source":"i+1","value":3,"formatted":"3"},". ",{"source":"option","value":"unknown","formatted":"unknown"}]},"formatted":"3. unknown"}]},"formatted":"1. to do it themselves\n2. get legal help\n3. unknown"},"\n\nUser statement: \"",{"source":"user_next_action","value":"Myself.","formatted":"Myself."},"\"\n\nAnswer: \"The user wants to take option #"]},"stop":null,"verbose":false,"default":"","max_tokens":256}
{"self":{"class_name":"OpenAIAgent","model":"text-davinci-002","temperature":0.0,"top_p":1.0},"prompt":{"__fstring__":["What does the user wish to do?\n\nOptions:\n",{"source":"options_str","value":{"__fstring__":[{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[0]","value":{"__fstring__":[{"source":"i+1","value":1,"formatted":"1"},". ",{"source":"option","value":"to do it themselves","formatted":"to do it themselves"}]},"formatted":"1. to do it themselves"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[1]","value":{"__fstring__":[{"source":"i+1","value":2,"formatted":"2"},". ",{"source":"option","value":"get legal help","formatted":"get legal help"}]},"formatted":"2. get legal help"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[2]","value":{"__fstring__":[{"source":"i+1","value":3,"formatted":"3"},". ",{"source":"option","value":"unknown","formatted":"unknown"}]},"formatted":"3. unknown"}]},"formatted":"1. to do it themselves\n2. get legal help\n3. unknown"},"\n\nUser statement: \"",{"source":"user_next_action","value":"Myself.","formatted":"Myself."},"\"\n\nAnswer: \"The user wants to take option #"]},"stop":null,"max_tokens":256}
{"prompt":{"__fstring__":["What does the user wish to do?\n\nOptions:\n",{"source":"options_str","value":{"__fstring__":[{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[0]","value":{"__fstring__":[{"source":"i+1","value":1,"formatted":"1"},". ",{"source":"option","value":"to do it themselves","formatted":"to do it themselves"}]},"formatted":"1. to do it themselves"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[1]","value":{"__fstring__":[{"source":"i+1","value":2,"formatted":"2"},". ",{"source":"option","value":"get legal help","formatted":"get legal help"}]},"formatted":"2. get legal help"},{"source":"F(\"\\n\")","value":{"__fstring__":["\n"]},"formatted":"\n"},{"source":"([F(f\"{i+1}. {option}\") for i, option in enumerate(options)])[2]","value":{"__fstring__":[{"source":"i+1","value":3,"formatted":"3"},". ",{"source":"option","value":"unknown","formatted":"unknown"}]},"formatted":"3. unknown"}]},"formatted":"1. to do it themselves\n2. get legal help\n3. unknown"},"\n\nUser statement: \"",{"source":"user_next_action","value":"Myself.","formatted":"Myself."},"\"\n\nAnswer: \"The user wants to take option #"]},"stop":null,"top_p":1.0,"temperature":0.0,"model":"text-davinci-002","max_tokens":256,"logprobs":null,"logit_bias":null,"n":1,"echo":false,"cache_id":0}
{"id":"cmpl-7IRXYyHUl0Y10oEVSB5EB17AHy7Jw","object":"text_completion","created":1684630124,"model":"text-davinci-002","choices":[{"text":"1 and do it themselves.\"","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":50,"completion_tokens":6,"total_tokens":56}}
"1 and do it themselves.\""
"to do it themselves"
{"self":"<ChatIO.ChatIO object at 0x2873a2650>","text":"Here is the form. I filled out some fields for you. Complete the rest and take it to the your county court. For more info, see the California Courts Self Help Guide.","takePhoto":false,"showDIY":true,"showLegalHelp":false,"isEnd":true}
